{"version":3,"sources":["./src/app/add-sal/add-sal.component.ts","./src/app/add-sal/add-sal.component.html","./src/environments/environment.ts","./src/app/salutation.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dialog/dialog.component.ts","./src/app/dialog/dialog.component.html","./src/app/add-title/add-title.component.ts","./src/app/add-title/add-title.component.html","./src/app/output/output.component.ts","./src/app/output/output.component.html","./src/app/input/input.component.ts","./src/app/input/input.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SalutationService } from '../salutation.service';\n\n@Component({\n    selector: 'app-add-sal',\n    templateUrl: './add-sal.component.html',\n    styleUrls: ['./add-sal.component.scss'],\n})\nexport class AddSalComponent implements OnInit {\n    newSalutation: FormGroup;\n\n    constructor(public salutationService: SalutationService,\n        private fb: FormBuilder) { }\n\n    ngOnInit(): void {\n        this.buildForm();\n    }\n\n\n    /**\n     * builds the Form to add a salutation\n     */\n    private buildForm() {\n        this.newSalutation = this.fb.group({\n            language: [''],\n            salutation: [''],\n            gender: ['2'],\n            letterSalutation: [''],\n        });\n    }\n\n    /**\n     * Checks the error in salutation and returns it as a string\n     *\n     * @returns Error Message as string\n     */\n    getErrorMessage() {\n        if (this.newSalutation.hasError('required')) {\n            return 'You have to enter a salutation';\n        }\n        return this.newSalutation.hasError('salutation')\n            ? 'Not a valid salutation'\n            : '';\n    }\n\n    /**\n     * adds a Salutation to the recognize list \n     */\n    async addSalutation() {\n        try {\n            await this.salutationService.addSalutation(this.newSalutation.value);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n","<mat-card class=\"inputCard\">\n    <mat-card-header>\n        <mat-card-title>Add Salutation</mat-card-title>\n        <mat-card-subtitle>enter your Salutation you want to add</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]=\"newSalutation\" class=\"formSal\">\n\n            <div class=\"container\">\n                <mat-form-field>\n                    <mat-label>letter salutation</mat-label>\n                    <input matInput formControlName=\"letterSalutation\" required>\n                    <mat-error *ngIf=\"newSalutation.invalid\">{{getErrorMessage()}}</mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"container\">\n                <mat-form-field>\n                    <mat-label>salutation</mat-label>\n                    <input matInput formControlName=\"salutation\">\n                </mat-form-field>\n            </div>\n\n            <div class=\"container\">\n                <mat-form-field>\n                    <mat-label>gender</mat-label>\n                    <mat-select formControlName=\"gender\">\n                        <mat-option value=\"0\">Men</mat-option>\n                        <mat-option value=\"1\">Woman</mat-option>\n                        <mat-option value=\"2\">Unknown</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n\n            <div class=\"container\">\n                <mat-form-field>\n                    <mat-label>language</mat-label>\n                    <mat-select formControlName=\"language\">\n                        <mat-option value=\"german\">german</mat-option>\n                        <mat-option value=\"french\">french</mat-option>\n                        <mat-option value=\"english\">english</mat-option>\n                        <mat-option value=\"spain\">spanish</mat-option>\n                        <mat-option value=\"italian\">italian</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n\n        </form>\n    </mat-card-content>\n    <div class=\"container\">\n        <button mat-raised-button color=\"primary\" [disabled]=\"(newSalutation.get('letterSalutation').invalid)\"\n            (click)=\"addSalutation()\">add\n            salutation</button>\n    </div>\n</mat-card>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable, ReplaySubject, throwError } from 'rxjs';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { INewSalutation } from './model/INewSalutation';\nimport { ISalutation } from './model/ISalutation';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SalutationService {\n    private _salutIsForm: boolean = false;\n    private _formatSalutation = new ReplaySubject<ISalutation>(1);\n    private _url: string = 'https://swq.kr31sw1chs.de/ContactSplitter';\n    private _urlAddTitle: string = 'https://swq.kr31sw1chs.de/ContactSplitter/title';\n    private _urlAddSal: string = 'https://swq.kr31sw1chs.de/ContactSplitter/salutation';\n    private dialogRef: MatDialogRef<DialogComponent>;\n\n    constructor(private http: HttpClient, private dialog: MatDialog) { }\n\n    public get salutIsForm(): boolean {\n        return this._salutIsForm;\n    }\n    public set salutIsForm(isForm: boolean) {\n        this._salutIsForm = isForm;\n    }\n    public get formatSalutation$() {\n        return this._formatSalutation.asObservable();\n    }\n    public set formatSalutation(sal: ISalutation) {\n        this._formatSalutation.next(sal);\n    }\n    public get url(): string {\n        return this._url;\n    }\n    public set url(value: string) {\n        this._url = value;\n    }\n    public get urlAddTitle(): string {\n        return this._urlAddTitle;\n    }\n    public set urlAddTitle(value: string) {\n        this._urlAddTitle = value;\n    }\n    public get urlAddSal(): string {\n        return this._urlAddSal;\n    }\n    public set urlAddSal(value: string) {\n        this._urlAddSal = value;\n    }\n\n    /**\n     * fills in the a new formatted salutation\n     * @param sal formatted salutation\n     */\n    fillSalutation(sal: ISalutation) {\n        this.formatSalutation = sal;\n        this.salutIsForm = true;\n    }\n\n    /**\n     * fetches the formatted salutation from the backend\n     * @param sal salutation to be formatted\n     * @returns formatted salutation as ISalutation\n     */\n    fetchFormSalut(sal: string): Observable<any> {\n        var params = new HttpParams().set('CompleteContact', sal);\n        return this.http.get(this.url, { params }).pipe(\n            retry(3),\n            catchError((err) => {\n                this.handleError(err);\n                return throwError(err);\n            }));\n    }\n\n    /**\n     * Formats a string to a formatted salutation\n     * @param sal salutation to be formatted\n     */\n    goFormatSalut(sal: string) {\n        this.fetchFormSalut(sal).subscribe((data) => {\n            console.log(data);\n            this.fillSalutation(data);\n        });\n    }\n\n    /**\n     * opens a dialog and shows the message\n     * @param message message\n     */\n    openDialog(message: string) {\n        this.dialogRef = this.dialog.open(DialogComponent, {\n            data: { message: message },\n        });\n    }\n\n    /**\n     * call the API to add a new Salutation to the Backend\n     * @param newSal Salutation to add\n     */\n    async addSalutation(newSal: INewSalutation) {\n        try {\n            await this.http.post(this.urlAddSal, newSal).toPromise().then(() => {\n                this.openDialog('Successfully added \"' + newSal.salutation + '\"');\n            })\n        } catch (err) {\n            this.openDialog('failed to add \"' + newSal.salutation + '\". Salutation already exists or is invalid.')\n            throw err;\n        }\n    }\n\n    /**\n     * \n     * call the API to add a new title to the Backend\n     * @param newTitle title to add\n     */\n    async addTitle(newTitle: string) {\n        try {\n            var params = new HttpParams().set('title', newTitle);\n            await this.http.post(this.urlAddTitle + '?title=' + newTitle, {})\n                .toPromise().then(() => {\n                    this.openDialog('Successfully added \"' + newTitle + '\"');\n                })\n        } catch (err) {\n            this.openDialog('failded to add \"' + newTitle + '\". Title already exists or is invalid.');\n            throw err;\n        }\n    }\n\n    /**\n     * handle the error from an API call\n     * @param error HttpErrorResponse Object\n     */\n    private handleError(error: HttpErrorResponse) {\n        if (error.status === 0) {\n            // A client-side or network error occurred.\n            this.openDialog('A client-side or network error occurred, please check your connection.');\n        } else if (error.status === 400) {\n            // A error with the input occurred.\n            this.openDialog('The inputstring was invalid, please check again');\n        }\n        else if (error.status === 500) {\n            // A server-side error occurred.\n            this.openDialog('There is a Problem on the backend, pleas try later again')\n        }\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(\n            `Backend returned code ${error.status}, ` + `body was: ${error.error}`\n        );\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'salutationFormatter';\n}\n","<div class=\"container\">\n    <div class=\"input\">\n        <app-input></app-input>\n    </div>\n    <div class=\"output\">\n        <app-output></app-output>\n    </div>\n    <div class=\"addSalutation\">\n        <app-add-sal></app-add-sal>\n    </div>\n    <div class=\"addTitle\">\n        <app-add-title></app-add-title>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { InputComponent } from './input/input.component';\nimport { OutputComponent } from './output/output.component';\nimport { AddSalComponent } from './add-sal/add-sal.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatSelectModule } from '@angular/material/select';\nimport { AddTitleComponent } from './add-title/add-title.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InputComponent,\n    OutputComponent,\n    AddSalComponent,\n    DialogComponent,\n    AddTitleComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ClipboardModule,\n    MatRadioModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatSelectModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [DialogComponent],\n})\nexport class AppModule {}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { inject } from '@angular/core/testing';\nimport {\n    MatDialog,\n    MatDialogConfig,\n    MatDialogRef,\n    MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-dialog',\n    templateUrl: './dialog.component.html',\n    styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent implements OnInit {\n    private _message: string = '';\n\n    constructor(\n        private dialogRef: MatDialogRef<DialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data\n    ) {\n        this.message = data.message;\n    }\n\n    public get message(): string {\n        return this._message;\n    }\n    public set message(mes: string) {\n        this._message = mes;\n    }\n\n    ngOnInit(): void { }\n\n    close() {\n        this.dialogRef.close();\n    }\n}\n","<h2 mat-dialog-title></h2>\n\n<mat-dialog-content>\n    {{message}}\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\" (click)=\"close()\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DialogRole, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogComponent } from '../dialog/dialog.component';\nimport { SalutationService } from '../salutation.service';\n\n@Component({\n    selector: 'app-add-title',\n    templateUrl: './add-title.component.html',\n    styleUrls: ['./add-title.component.scss']\n})\nexport class AddTitleComponent implements OnInit {\n    newTitle = new FormControl('');\n\n    constructor(public salutationService: SalutationService) { }\n\n    ngOnInit(): void { }\n\n    /**\n     * Checks the error in salutation and returns it as a string\n     *\n     * @returns Error Message as string\n     */\n    getErrorMessage() {\n        if (this.newTitle.hasError('required')) {\n            return 'You have to enter a title';\n        }\n        return this.newTitle.hasError('title')\n            ? 'Not a valid title'\n            : '';\n    }\n\n    /**\n     * adds the title to the recognize list\n     */\n    async addTitle() {\n        try {\n            await this.salutationService.addTitle(this.newTitle.value);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n\n","<mat-card class=\"inputCard\">\n    <mat-card-header>\n        <mat-card-title>Add Title</mat-card-title>\n        <mat-card-subtitle>enter your Title you want to add</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n\n        <div class=\"container\">\n            <mat-form-field>\n                <mat-label>title</mat-label>\n                <input matInput [formControl]=\"newTitle\" required>\n                <mat-error *ngIf=\"newTitle.invalid\">{{getErrorMessage()}}</mat-error>\n            </mat-form-field>\n        </div>\n\n    </mat-card-content>\n    <div class=\"container\">\n        <button mat-raised-button color=\"primary\" [disabled]=\"(newTitle.invalid)\" (click)=\"addTitle()\">add\n            title</button>\n    </div>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ISalutation } from '../model/ISalutation';\nimport { SalutationService } from '../salutation.service';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'app-output',\n    templateUrl: './output.component.html',\n    styleUrls: ['./output.component.scss'],\n})\nexport class OutputComponent implements OnInit {\n    private _letterSalutation: string;\n    public salutationForm: FormGroup;\n    private sub: Subscription;\n\n    constructor(\n        private fb: FormBuilder,\n        public salutationService: SalutationService,\n        private clipboard: Clipboard\n    ) { }\n\n    ngOnInit(): void {\n        this.buildForm();\n        this.salutationService.formatSalutation$.subscribe((fSalutation) => {\n            this.fillForm(fSalutation);\n        });\n        this.salutationForm.valueChanges.subscribe(() => {\n            this.generateFullLetterSalutation();\n        })\n    }\n\n    public get letterSalutation(): string {\n        return this._letterSalutation;\n    }\n    public set letterSalutation(salutation: string) {\n        this._letterSalutation = salutation;\n    }\n\n    /**\n     * builds the Form to edit the formatted salutation\n     */\n    private buildForm() {\n        this.salutationForm = this.fb.group({\n            firstname: [''],\n            gender: [''],\n            language: [''],\n            lastname: [''],\n            letterSalutation: [''],\n            salutation: [''],\n            salutationTitle: [''],\n            title: ['']\n        });\n    }\n\n    /**\n     * Fill the formatted Salutation in the Form\n     * @param fSalut Formatted Salutation\n     */\n    private fillForm(fSalut: ISalutation) {\n        this.salutationForm.setValue({\n            firstname: fSalut.firstname,\n            gender: fSalut.gender,\n            // language: fSalut.language,\n            language: this.convertLanguage(fSalut.language),\n            lastname: fSalut.lastname,\n            letterSalutation: fSalut.letterSalutation,\n            salutation: fSalut.salutation,\n            salutationTitle: fSalut.salutationTitle,\n            title: fSalut.title,\n        });\n    }\n\n    /**\n     * converts a language to the according number\n     * @param lang language to convert into number\n     * @returns number\n     */\n    convertLanguage(lang: string) {\n        switch (lang) {\n            case \"German\": {\n                return 0;\n                break;\n            }\n            case \"French\": {\n                return 1;\n                break;\n            }\n            case \"English\": {\n                return 2;\n                break;\n            }\n            case \"Spain\": {\n                return 3;\n                break;\n            }\n            case \"Italian\": {\n                return 4;\n                break;\n            }\n            default:\n                return \"\";\n                break;\n        }\n    }\n\n    /**\n     * checks if the Form Group Field if it is null or empty\n     * @param field field of the FormGroup\n     * @returns boolean - true if empty\n     */\n    private checkFieldIfEmpty(field: string): boolean {\n        var empty = false;\n        if (\n            this.salutationForm.get(field).value == null ||\n            this.salutationForm.get(field).value == ''\n        ) {\n            empty = true;\n        }\n        return empty;\n    }\n\n    /**\n     * creates the letter salutation as string\n     * first method ist for a static string - second is for editing \n     */\n    private generateFullLetterSalutation() {\n        var salutation = '';\n        if (!this.checkFieldIfEmpty('letterSalutation')) {\n            salutation = this.salutationForm.get('letterSalutation').value;\n        }\n        if (!this.checkFieldIfEmpty('firstname')) {\n            salutation =\n                salutation + ' ' + this.salutationForm.get('firstname').value;\n        }\n        if (!this.checkFieldIfEmpty('lastname')) {\n            salutation = salutation + ' ' + this.salutationForm.get('lastname').value;\n        }\n        this.letterSalutation = salutation;\n    }\n\n    /**\n     * copy the letter salutation into the clipboard\n     */\n    public copyLetterSal() {\n        this.clipboard.copy(this.letterSalutation);\n    }\n}\n","<mat-card class=\"outputCard\" *ngIf=\"this.salutationService.salutIsForm\">\n    <mat-card-content>\n        <form [formGroup]=\"salutationForm\">\n            <h2>Letter Salutation:</h2>\n            <div class=\"row\">\n                <button mat-button color=\"primary\" (click)=\"copyLetterSal()\">copy</button>\n                <div class=\"fullLetterSalutation\">{{this.letterSalutation}}</div>\n            </div>\n\n            <div class=\"inputCollum\">\n                <mat-form-field>\n                    <input matInput placeholder=\"letter salutation\" formControlName=\"letterSalutation\" required>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"firstname\" formControlName=\"firstname\" required>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"lastname\" formControlName=\"lastname\" required>\n                </mat-form-field>\n            </div>\n\n            <h2>Additional Information</h2>\n            <mat-card-subtitle>A change on the additional information wont have an effect on the Letter Salutation\n            </mat-card-subtitle>\n            <div class=\"inputCollum\">\n                <mat-form-field>\n                    <input matInput placeholder=\"salutation\" formControlName=\"salutation\" required>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <mat-label>language</mat-label>\n                    <mat-select formControlName=\"language\">\n                        <mat-option [value]=\"0\">german</mat-option>\n                        <mat-option [value]=\"1\">french</mat-option>\n                        <mat-option [value]=\"2\">english</mat-option>\n                        <mat-option [value]=\"3\">spanish</mat-option>\n                        <mat-option [value]=\"4\">italian</mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <mat-label>gender</mat-label>\n                    <mat-select formControlName=\"gender\">\n                        <mat-option [value]=\"0\">Men</mat-option>\n                        <mat-option [value]=\"1\">Woman</mat-option>\n                        <mat-option [value]=\"2\">Unknown</mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input matInput placeholder=\"all title\" formControlName=\"title\">\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { SalutationService } from '../salutation.service';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent implements OnInit {\n  constructor(public salutationService: SalutationService) {}\n\n  salutation = new FormControl('', [Validators.required]);\n\n  ngOnInit(): void {}\n\n  /**\n   * Checks the error in salutation and returns it as a string\n   *\n   * @returns Error Message as string\n   */\n  getErrorMessage() {\n    if (this.salutation.hasError('required')) {\n      return 'You have to enter a salutation';\n    }\n    return this.salutation.hasError('salutation')\n      ? 'Not a valid salutation'\n      : '';\n  }\n\n  /**\n   * formats the salutation\n   */\n  formatSalutation() {\n    this.salutationService.goFormatSalut(this.salutation.value);\n  }\n}\n","<mat-card class=\"inputCard\">\n    <mat-card-header>\n        <mat-card-title>Salutation Validator</mat-card-title>\n        <mat-card-subtitle>enter your Salutation you want to format</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <div class=\"container\">\n            <mat-form-field class=\"inputSalutation\">\n                <input matInput [formControl]=\"salutation\" required>\n                <mat-error *ngIf=\"salutation.invalid\">{{getErrorMessage()}}</mat-error>\n            </mat-form-field>\n        </div>\n    </mat-card-content>\n    <div class=\"container\">\n        <button mat-raised-button color=\"primary\" [disabled]=\"salutation.invalid\" (click)=\"formatSalutation()\">format\n            salutation</button>\n    </div>\n</mat-card>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}